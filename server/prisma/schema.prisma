generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  user_id            String   @id @default(uuid())
  username           String   @unique
  email              String   @unique
  hash_password      String
  hash_refresh_token String?
  is_verified        String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

model Customer {
  customer_id  String   @id @default(uuid())
  first_name   String
  last_name    String
  email        String   @unique
  phone_number String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relationships
  orders Order[]
}

model Order {
  order_id     String   @id @default(uuid())
  customer_id  String
  order_status String   @default("pending") // enum can be used if necessary
  total_amount Float
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relationships
  customer Customer  @relation(fields: [customer_id], references: [customer_id])
  payments Payment[]
  sales    Sale[]
}

model Payment {
  payment_id     String   @id @default(uuid())
  order_id       String
  payment_method String // enum with 'cash' or 'card'
  payment_status String // enum with 'pending' or 'complete'
  amount_paid    Float
  payment_date   DateTime @default(now())

  // Relationships
  order Order @relation(fields: [order_id], references: [order_id])
}

model Product {
  product_id   String   @id @default(uuid())
  product_name String
  description  String?
  category     String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relationships
  price_inventory        PriceInventory[]
  product_variants       ProductVariant[]
  sales                  Sale[]
  inventory_transactions InventoryTransaction[]
}

model ProductVariant {
  variant_id String   @id @default(uuid())
  product_id String
  size       String?
  color      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  product                Product                @relation(fields: [product_id], references: [product_id])
  sales                  Sale[]
  inventory_transactions InventoryTransaction[]
}

model PriceInventory {
  id             String   @id @default(uuid())
  product_id     String
  price          Float
  stock_quantity Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relationships
  product Product @relation(fields: [product_id], references: [product_id])
}

model InventoryTransaction {
  transaction_id   String   @id @default(uuid())
  product_id       String
  variant_id       String?
  quantity_change  Int
  transaction_type String // enum can be sale, restock
  transaction_date DateTime @default(now())

  // Relationships
  product         Product         @relation(fields: [product_id], references: [product_id], onUpdate: NoAction, onDelete: NoAction)
  product_variant ProductVariant? @relation(fields: [variant_id], references: [variant_id])
}

model Sale {
  sale_id       String   @id @default(uuid())
  order_id      String
  product_id    String
  variant_id    String?
  quantity_sold Int
  total_price   Float
  created_at    DateTime @default(now())

  // Relationships
  order           Order           @relation(fields: [order_id], references: [order_id])
  product         Product         @relation(fields: [product_id], references: [product_id], onUpdate: NoAction, onDelete: NoAction)
  product_variant ProductVariant? @relation(fields: [variant_id], references: [variant_id])
}

model Inventory {
  id            Int      @id @default(autoincrement())
  product_name  String
  category      String
  stock_level   Int
  reorder_level Int
  price         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
